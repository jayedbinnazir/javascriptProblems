1. Decorate the function and with partial caching logic ?
1.1 . What is call forwarding ? Make an example ? differntiate func.call() and func.apply()
1.2 . Write a hashing function that could acpt any number of arguments of other functions
      and convert them into string
2. what is the difference between caching and partial caching ?
3. Decorate an Object method with partail caching logic . (You have to use call forwarding) ;


4. Spy decorator
importance: 5
Create a decorator spy(func) that should return a wrapper that saves all calls to function in its calls property.

Every call is saved as an array of arguments.

For instance:

function work(a, b) {
  alert( a + b ); // work is an arbitrary function or method
}

work = spy(work);

work(1, 2); // 3
work(4, 5); // 9

for (let args of work.calls) {
  alert( 'call:' + args.join() ); // "call:1,2", "call:4,5"
}
P.S. That decorator is sometimes useful for unit-testing. Its advanced form is sinon.spy in Sinon.JS library.


5.Delaying decorator
importance: 5
Create a decorator delay(f, ms) that delays each call of f by ms milliseconds.

For instance:

function f(x) {
  alert(x);
}

// create wrappers
let f1000 = delay(f, 1000);
let f1500 = delay(f, 1500);

f1000("test"); // shows "test" after 1000ms
f1500("test"); // shows "test" after 1500ms
In other words, delay(f, ms) returns a "delayed by ms" variant of f.

In the code above, f is a function of a single argument, but your solution should pass all arguments and the context this.

6. apply two wrapper function to a original function to provide different functionality togather

7. Try to solve the last 2 problems from the chapter .

8. Suppose Youn hAve a multiPly function ,  that takes 2 arguments . 
    Make it double(a) , which takes a one argument and doubles it .
    Decorate The multiply function like this